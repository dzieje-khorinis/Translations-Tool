name: Build Production Containers

on:
  push:
    branches:
      - deploy-2
    tags:
      - v*

env:
  DJANGO_IMAGE_NAME: translation-tool-backend
  DB_IMAGE_NAME: translation-tool-db
  ROUTER_IMAGE_NAME: translation-tool-router

jobs:
  push-django:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v2

      - name: Build django image
        run: docker build . --file ./compose/production/django/Dockerfile --tag $DJANGO_IMAGE_NAME

      - name: Log into registry
        run: echo ${{ secrets.CR_PAT }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Push django image
        run: |
          IMAGE_ID=ghcr.io/dzieje-khorinis/$DJANGO_IMAGE_NAME
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # Use Docker `latest` tag convention
          [ "$VERSION" == "deploy-2" ] && VERSION=latest
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $DJANGO_IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
#  deploy:
#    needs: push-django
#    runs-on: macos-latest
#    if: github.event_name == 'push'
#    steps:
#      - uses: actions/checkout@v2
#      - name: Install SSH key
#        uses: shimataro/ssh-key-action@v2
#        with:
#          key: ${{ secrets.SSH_PRIVATE_KEY }}
#          name: id_rsa
#          known_hosts: ${{ secrets.KNOWN_HOSTS }}
#
#      - name: Run deploy script
#        run: cat scripts/deploy.sh | ssh -o "IdentitiesOnly=yes" -i ~/.ssh/id_rsa deploy-user@198.23.228.35
#  push-db:
#    runs-on: ubuntu-latest
#    if: github.event_name == 'push'
#
#    steps:
#      - uses: actions/checkout@v2
#
#      - name: Build postgres image
#        run: docker build . --file ./compose/production/postgres/Dockerfile --tag $DB_IMAGE_NAME
#
#      - name: Log into registry
#        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin
#
#      - name: Push postgres image
#        run: |
#          IMAGE_ID=docker.pkg.github.com/${{ github.repository }}/$DB_IMAGE_NAME
#
#          # Change all uppercase to lowercase
#          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
#
#          # Strip git ref prefix from version
#          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
#
#          # Strip "v" prefix from tag name
#          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
#
#          # Use Docker `latest` tag convention
#          [ "$VERSION" == "main" ] && VERSION=latest
#
#          echo IMAGE_ID=$IMAGE_ID
#          echo VERSION=$VERSION
#
#          docker tag $DB_IMAGE_NAME $IMAGE_ID:$VERSION
#          docker push $IMAGE_ID:$VERSION
#  push-router:
#    runs-on: ubuntu-latest
#    if: github.event_name == 'push'
#
#    steps:
#      - uses: actions/checkout@v2
#
#      - name: Build traefik image
#        run: docker build . --file ./compose/production/traefik/Dockerfile --tag $ROUTER_IMAGE_NAME
#
#      - name: Log into registry
#        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin
#
#      - name: Push traefik image
#        run: |
#          IMAGE_ID=docker.pkg.github.com/${{ github.repository }}/$ROUTER_IMAGE_NAME
#
#          # Change all uppercase to lowercase
#          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
#
#          # Strip git ref prefix from version
#          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
#
#          # Strip "v" prefix from tag name
#          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
#
#          # Use Docker `latest` tag convention
#          [ "$VERSION" == "main" ] && VERSION=latest
#
#          echo IMAGE_ID=$IMAGE_ID
#          echo VERSION=$VERSION
#
#          docker tag $ROUTER_IMAGE_NAME $IMAGE_ID:$VERSION
#          docker push $IMAGE_ID:$VERSION
